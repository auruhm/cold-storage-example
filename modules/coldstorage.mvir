module MyColdStorage {
    import 0x0.Hash;
    import 0x0.Coins;

    resource T {
        secretKey: bytearray, 
        deposit: Coins.Coin,
    }

    public deposit(secretKey: bytearray, deposit: Coins.Coin) acquires T {
        let d_ref: &mut Self.T;

        assert(copy(secretKey) != h"", 101);

        if (exists<T>(get_txn_sender())) {
            d_ref = borrow_global_mut<T>(get_txn_sender());
            assert(*(&copy(d_ref).secretKey) == h"", 102);

            *(&mut copy(d_ref).secretKey) = move(secretKey);
            *(&mut move(d_ref).deposit) = move(deposit);
        } else {
            move_to_sender<T>(T {
                secretKey: move(secretKey),
                deposit: move(deposit),
            });
        }

        return;
    }

    public withdraw(rawKey: bytearray): Coins.Coin acquires T {
        let hash: bytearray;
        let d_ref: &mut Self.T;
        let to_withdraw: Coins.Coin;

        assert(exists<T>(get_txn_sender()), 103);

        d_ref = borrow_global_mut<T>(get_txn_sender());

        hash = Hash.sha3_256(move(rawKey));
        assert(move(hash) == *(&copy(d_ref).secretKey), 104);

        to_withdraw = *(&copy(d_ref).deposit);
        *(&mut copy(d_ref).secretKey) = h"";
        *(&mut move(d_ref).deposit) = Coins.zero_coin();

        return move(to_withdraw);
    }
}